Implementing a "fake" congestion:
- Right now, the way we start the whole process that leads to a deadlock is by sending a pause packet from the host.
- While this is in some sense a possible way a deadlock might form, another common way (perhaps more common) is the switch buffer itself is lagging and processing packets slowly, which causes it to send a pause packet back out the ingress port.
- Maybe we can introduce some artificial delay in the switch buffer process to trigger pause packets directly from the switch itself.
- This artificial delay will most likely have to be in our CPU, which is the switch buffer.
- In order for regular packets to even go into the switch CPU in the first place, the ingress_buffering status on the switch has to be marked True.
- So we have to somehow trigger the switch to mark ingress_buffering as True, before the switch will automatically forward packets to the buffer.
- Possible approach:
	- Allow user to control the CPU script such that we can trigger a custom packet to be sent down to a switch.
	- Once switch receives this custom packet, it will set the specified ingress_buffering as True.
	- At the same time, on the CPU side, a delay will be introduced for each packet that the ingress queue processes. This is so that the queue will accumulate.
	- Subsequent regular packets that come into the switch will notice the ingress is bufferring, thus send the packet to CPU ingress buffer.
	- Ultimately, the ingress buffer will accumulate and cross the threshold, triggering a pause frame to be sent upstream, originating from the switch itself.


DCFIT:

1. Implementing the port-based causality data structure (Traffic map)
	- An NxN bit-map, which we will use registers to represent.
	- We cannot create 2D register (or at least idk how), but we can do a simple 1D representation
		- For mapping of ingress port X to egress port Y, formula for the index is [MAX_PORTS*(y-1) + x] - 1
		- X and Y are 1-based, the actual index is 0-based.
	- This traffic map acts upon each regular packet that comes in.
	- So each time the packet comes in, it is processed and recognized by the switch.
	- The switch will not edit the traffic map if the packet is just forwarded normally.
	- Traffic map shall only be updated if the packet is forwarded to CPU, i.e. added to our switch buffer.
	- Just before sending to CPU, switch will mark the traffic map for that ingress-egress port pair with 1.
	- So even if multiple packets with the same pair is sent to CPU, that's fine, all will mark as 1.
	- Then, when the packet comes back from the CPU and is ready to be sent out, we need to check if it is the last packet in the buffer.
	- CPU header will contain a new bit that will indicate whether it is the last packet or not.
	- If the packet to be sent out is in fact the last packet, then the switch will unmark the traffic map for that ingress-egress port pair.

2. Implementing the checking message
	- Checking messages are piggybacked onto pause frames.
	- Reading each checking message will allow you to find out from exactly which switch and which port did that pause frame originate from.
	- When checking message is sent from one switch port to its upstream, the upstream will store the checking message at that receive port.
		- We can use a simple register for this, since only 1 checking message per port...?
	- Then, that same receive port will check the traffic map to find if there are any ingress port with relation with itself.
		- No for-loops in P4, so we might have to multicast this and perform this check at the egress.
	- If it has relation, it means that there are some packets in the buffer which have this i2e pair.
	- Then, those ports with relation, we check if we have paused the upstream
	- If upstream has been paused, then the checking message should be forwarded on, with the same data.
	Q: When should the stored checking messages at each port be cleared?
	- When a resume frame is received on that port.
	Q: What happens when a particular port receives 2 different checking messages (i.e. different originating switch or different sequence ID)?
	- Just replace with the newer one.
